<?php

/**
 * @file
 *
 */

/**
 * Implements hook_entity_info().
 */
function starter_response_entity_info() {
  return array(
    'starter_response_set' => array(
      'label' => t('Response Set'),
      'plural label' => t('Response Sets'),
      'description' => t('Entity representing a Starter Response configuration set.'),
      'entity class' => 'StarterResponseSet',
      'controller class' => 'StarterResponseSetEntityController',
      'base table' => 'starter_response_set',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
      ),
      // Make use the class' label() and uri() implementation by default.
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'bundles' => array(
        'starter_response_set' => array(
          'label' => t('Response Set'),
        ),
      ),
      'module' => 'starter_response',
    )
  );
}

/**
 * Implements hook_menu().
 */
function starter_response_menu() {
  $items = array();

  $items['admin/structure/starter-response'] = array(
    'title' => 'Starter Response sets',
    'description' => 'Manage Starter Response sets.',
    'page callback' => 'starter_response_admin_overview',
    'file' => 'includes/starter_response.admin.inc',
    'access arguments' => array('administer starter_response'),
  );
  $items['admin/structure/starter-response/new'] = array(
    'title' => 'Add new Starter Response set',
    'page callback' => 'starter_response_set_form_wrapper',
    'page arguments' => array(new StarterResponseSet),
    'file' => 'includes/starter_response.admin.inc',
    'access arguments' => array('administer starter_response'),
  );
  $items['admin/structure/starter-response/%starter_response_set/edit'] = array(
    'title' => 'Edit Starter Response set',
    'page callback' => 'starter_response_set_form_wrapper',
    'page arguments' => array(3),
    'file' => 'includes/starter_response.admin.inc',
    'access arguments' => array('administer starter_response'),
  );
  $items['admin/structure/starter-response/%starter_response_set/delete'] = array(
    'title' => 'Delete Starter Response set',
    'page callback' => 'starter_response_set_delete_form_wrapper',
    'page arguments' => array(3),
    'file' => 'includes/starter_response.admin.inc',
    'access arguments' => array('administer starter_response'),
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function starter_response_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action "new" link on 'admin/structure/ec2_classrom/*' pages.
  if ($root_path == 'admin/structure/starter-response') {
    $item = menu_get_item('admin/structure/starter-response/new');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Wrapper function for menu loader.
 */
function starter_response_set_load($id) {
  return StarterResponseSet::find($id);
}


/**
 * Implements hook_forms().
 */
function starter_response_forms($form_id, $args) {
  $forms = array();

  // Define a wrapper ID for the set add / edit form.
  $forms['starter_response_ui_set_form'] = array(
    'callback' => 'starter_response_set_form',
  );

  // Define a wrapper ID for the set delete form.
  $forms['starter_response_ui_set_delete_form'] = array(
    'callback' => 'starter_response_set_delete_form',
  );

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see starter_response_ui_set_form()
 */
function starter_response_form_starter_response_ui_set_form_alter(&$form, &$form_state) {
  // Add a submit handler to the save button to add a redirect.
  $form['actions']['submit']['#submit'][] = 'starter_response_ui_set_form_submit';
  $form['actions']['cancel'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Cancel'), 'admin/structure/starter-response'),
    '#weight' => 100,
  );
}

/**
 * Submit callback for starter_response_ui_set_form().
 *
 * @see starter_response_form_starter_response_ui_set_form_alter()
 */
function starter_response_ui_set_form_submit($form, &$form_state) {
  // Apply the redirect based on the clicked button.
  if ($form_state['triggering_element']['#value'] == t('Save set')) {
    drupal_set_message(t('Starter Response set saved.'));

    $form_state['redirect'] = 'admin/structure/starter-response';
  }
}

/**
 * Provide a mapped version of entity types and their labels for use as form
 * options.
 */
function starter_response_map_entity_types() {
  $options = array();
  $types = entity_get_info();
  foreach ($types as $name => $type) {
    if ($type['fieldable'] == TRUE) {
      $options[$name] = $type['label'];
    }
  }
  return $options;
}

/**
 * Provide a mapped version of bundles and their labels for use as form
 * options.
 */
function starter_response_map_bundles($type) {
  $options = array();
  $entity_info = entity_get_info($type);
  foreach ($entity_info['bundles'] as $name => $type) {
    $options[$name] = $type['label'];
  }
  return $options;
}
